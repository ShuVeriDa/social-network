{"version":3,"file":"static/js/386.33a78659.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA2G,0BCA3G,GAAgB,OAAS,4B,mBCQZA,EAA6B,SAAC,GAAgB,IAAfC,EAAc,EAAdA,KACrCC,EAAO,YAD4C,EAARC,GAE/C,OACG,0BACG,gBAAKC,UAAS,UAAMC,EAAAA,OAAN,YAAwBA,EAAAA,QAAtC,UACG,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,SCbhC,EAAyB,wBCMZM,EAA2B,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACvC,OACG,0BACG,gBAAKJ,UAAWC,EAAhB,SAAiCG,O,iDCDpCC,GAAcC,EAAAA,EAAAA,GAAiB,IAoBrC,GAAeC,EAAAA,EAAAA,GAAU,CAACC,KAAM,2BAAhC,EAlBuB,SAACC,GACrB,OACG,kBAAMC,SAAUD,EAAME,aAAtB,WACG,0BACG,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBR,KAAK,iBACLoB,YAAY,0BAGtB,0BACG,6C,8BCIZ,GAAeC,EAAAA,EAAAA,KACZC,EAAAA,EAAAA,KAdmB,SAACC,GACpB,MAAO,CACJC,YAAaD,EAAMC,gBAGA,SAACC,GACvB,MAAO,CACJC,cAAe,SAACC,GACbF,GAASC,EAAAA,EAAAA,GAAcC,SAO7BC,EAAAA,EAFH,ECXwC,SAAC,GAAiB,IAAZhB,EAAW,oBAElDW,EAAQX,EAAMY,YAEZK,EAAkBN,EAAMO,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAACjC,EAAD,CAA4BC,KAAMgC,EAAOhC,KAAME,GAAI8B,EAAO9B,IAAzC8B,EAAO9B,OACtE+B,EAAmBV,EAAMW,SAASH,KAAI,SAAAxB,GAAO,OAAI,SAACD,EAAD,CAA0BC,QAASA,EAAQA,SAA7BA,EAAQL,OAM7E,OAAoB,GAAhBU,EAAMuB,QAAwB,SAAC,KAAD,CAAU9B,GAAI,YAG7C,iBAAKF,UAAWC,EAAhB,WACG,gBAAKD,UAAWC,EAAhB,SACIyB,KAEJ,gBAAK1B,UAAWC,EAAhB,UACG,yBAAM6B,OAET,SAAC,EAAD,CAAgBpB,SAdA,SAACuB,GACpBxB,EAAMc,cAAcU,EAAOT,0B,iICd7BU,EAA6B,SAACd,GAAD,MAA6D,CAC3FY,OAAQZ,EAAMe,KAAKH,SAGf,SAASP,EAAoBW,GAUjC,OAFqCjB,EAAAA,EAAAA,IAAQe,EAARf,EANV,SAACV,GACzB,IAAKuB,EAAuBvB,EAAvBuB,OAAUK,GAAf,OAA4B5B,EAA5B,GACA,OAAKuB,GACE,SAACI,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUnC,GAAI","sources":["webpack://patientway/./src/Components/Dialogs/Dialogs.module.css?db5c","webpack://patientway/./src/Components/Dialogs/DIalog/DialogItem.module.css?5cec","Components/Dialogs/DIalog/DialogItem.tsx","webpack://patientway/./src/Components/Dialogs/Message/Message.module.css?687c","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageForm/AddMessageForm.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__fTCGC\",\"dialogsItems\":\"Dialogs_dialogsItems__KQ0bX\",\"messages\":\"Dialogs_messages__sLxoE\",\"message\":\"Dialogs_message__Q8W2W\",\"active\":\"Dialogs_active__n9zXc\",\"NewMessages\":\"Dialogs_NewMessages__wyDUS\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__hFSJC\"};","import React, {FC} from 'react';\r\nimport classes from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogType = {\r\n   name: string\r\n   id: number\r\n}\r\n\r\nexport const DialogItem: FC<DialogType> = ({name, id}) => {\r\n   let path = \"/dialogs/\" + id\r\n   return (\r\n      <div>\r\n         <div className={(`${classes.dialog} ${classes.active}`)}>\r\n            <NavLink to={path}>{name}</NavLink>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Message_dialog__aweBw\"};","import React, {FC} from 'react';\r\nimport classes from './Message.module.css'\r\n\r\ntype MessageType = {\r\n   message: string\r\n}\r\n\r\nexport const Message: FC<MessageType> = ({message}) => {\r\n   return (\r\n      <div>\r\n         <div className={classes.dialog}>{message}</div>\r\n      </div>\r\n   );\r\n};","import {Field, reduxForm} from \"redux-form\";\r\nimport React, {FormEventHandler} from \"react\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\ntype AddMessageFormType = {\r\n   handleSubmit: FormEventHandler<HTMLFormElement>\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props: AddMessageFormType) => {\r\n   return (\r\n      <form onSubmit={props.handleSubmit}>\r\n         <div>\r\n            <Field component={TextArea}\r\n                   validate={[required, maxLength50]}\r\n                   name='newMessageBody'\r\n                   placeholder=\"Enter your message\"\r\n            />\r\n         </div>\r\n         <div>\r\n            <button>Send</button>\r\n         </div>\r\n      </form>\r\n   )\r\n}\r\n\r\n\r\nexport default reduxForm({form: \"dialog-add-message-form\"}) (AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {DialogsPageType, sendMessageAC} from \"../../redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {RootReducerType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype DialogsContainerType = {\r\n   dialogsPage: DialogsPageType\r\n}\r\n\r\nlet mapStateToProps = (state: RootReducerType): DialogsContainerType => {\r\n   return {\r\n      dialogsPage: state.dialogsPage,\r\n   }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n   return {\r\n      sendMessageAC: (newMessageBody: string) => {\r\n         dispatch(sendMessageAC(newMessageBody))\r\n      }\r\n   }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n   connect(mapStateToProps, mapDispatchToProps),\r\n   withAuthRedirect\r\n) (Dialogs)","import React, {FC} from 'react';\r\nimport classes from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DIalog/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\ntype DialogsType = {\r\n   updateNewMessageBodyAC: (body: string) => void\r\n   sendMessageAC: (newMessageBody: string) => void\r\n   dialogsPage: DialogsPageType\r\n   isAuth: boolean\r\n}\r\n\r\nexport const Dialogs: FC<DialogsType> = ({ ...props}) => {\r\n\r\n   let state = props.dialogsPage\r\n\r\n   const dialogsElements = state.dialogs.map(dialog => <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>)\r\n   const messagesElements = state.messages.map(message => <Message key={message.id} message={message.message}/>)\r\n\r\n   const addNewMessage = (values: any) => {\r\n      props.sendMessageAC(values.newMessageBody)\r\n   }\r\n\r\n   if (props.isAuth == false) return <Navigate to={\"/login\"} />\r\n\r\n   return (\r\n      <div className={classes.dialogs}>\r\n         <div className={classes.dialogsItems}>\r\n            {dialogsElements}\r\n         </div>\r\n         <div className={classes.messages}>\r\n            <div>{messagesElements}</div>\r\n         </div>\r\n         <AddMessageForm onSubmit={addNewMessage}/>\r\n      </div>\r\n   );\r\n}","import {Navigate} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReducerType} from \"../redux/redux-store\";\r\n\r\ntype mapStateToPropsForRedirectType = {\r\n   isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootReducerType): mapStateToPropsForRedirectType => ({\r\n   isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n   const  RedirectComponent = (props: mapStateToPropsForRedirectType) => {\r\n      let {isAuth,...restProps} = props\r\n      if (!isAuth) return <Navigate to={'/login'}/>\r\n      return <Component {...restProps as T}/>\r\n   }\r\n\r\n   let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n   return ConnectedAuthRedirectComponent;\r\n};"],"names":["DialogItem","name","path","id","className","classes","to","Message","message","maxLength50","maxLengthCreator","reduxForm","form","props","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","compose","connect","state","dialogsPage","dispatch","sendMessageAC","newMessageBody","withAuthRedirect","dialogsElements","dialogs","map","dialog","messagesElements","messages","isAuth","values","mapStateToPropsForRedirect","auth","Component","restProps"],"sourceRoot":""}